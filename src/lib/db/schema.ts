import { relations } from 'drizzle-orm'
import {
    pgTable,
    integer,
    serial,
    text,
    timestamp,
    boolean,
    primaryKey,
} from 'drizzle-orm/pg-core'

import type { AdapterAccountType } from 'next-auth/adapters'

export const users = pgTable('user', {
    id: text('id')
        .primaryKey()
        .$defaultFn(() => crypto.randomUUID()),
    name: text('name'),
    email: text('email').unique(),
    emailVerified: timestamp('emailVerified', { mode: 'date' }),
    image: text('image'),
})

export const accounts = pgTable(
    'account',
    {
        userId: text('userId')
            .notNull()
            .references(() => users.id, { onDelete: 'cascade' }),
        type: text('type').$type<AdapterAccountType>().notNull(),
        provider: text('provider').notNull(),
        providerAccountId: text('providerAccountId').notNull(),
        refresh_token: text('refresh_token'),
        access_token: text('access_token'),
        expires_at: integer('expires_at'),
        token_type: text('token_type'),
        scope: text('scope'),
        id_token: text('id_token'),
        session_state: text('session_state'),
    },
    (account) => [
        {
            compoundKey: primaryKey({
                columns: [account.provider, account.providerAccountId],
            }),
        },
    ]
)

export const sessions = pgTable('session', {
    sessionToken: text('sessionToken').primaryKey(),
    userId: text('userId')
        .notNull()
        .references(() => users.id, { onDelete: 'cascade' }),
    expires: timestamp('expires', { mode: 'date' }).notNull(),
})

export const verificationTokens = pgTable(
    'verificationToken',
    {
        identifier: text('identifier').notNull(),
        token: text('token').notNull(),
        expires: timestamp('expires', { mode: 'date' }).notNull(),
    },
    (verificationToken) => [
        {
            compositePk: primaryKey({
                columns: [
                    verificationToken.identifier,
                    verificationToken.token,
                ],
            }),
        },
    ]
)

export const authenticators = pgTable(
    'authenticator',
    {
        credentialID: text('credentialID').notNull().unique(),
        userId: text('userId')
            .notNull()
            .references(() => users.id, { onDelete: 'cascade' }),
        providerAccountId: text('providerAccountId').notNull(),
        credentialPublicKey: text('credentialPublicKey').notNull(),
        counter: integer('counter').notNull(),
        credentialDeviceType: text('credentialDeviceType').notNull(),
        credentialBackedUp: boolean('credentialBackedUp').notNull(),
        transports: text('transports'),
    },
    (authenticator) => [
        {
            compositePK: primaryKey({
                columns: [authenticator.userId, authenticator.credentialID],
            }),
        },
    ]
)

export const habits = pgTable('habit', {
  id: serial('id').primaryKey(),
  name: text('name').notNull(), // The habit generated by AI
  description: text('description'), // Optional: Could be added later by user or AI
  createdAt: timestamp('created_at', { withTimezone: true }).defaultNow().notNull(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).defaultNow().notNull(),
  startDate: timestamp('start_date', { withTimezone: true }), // Can be set later
  endDate: timestamp('end_date', { withTimezone: true }), // Can be set later
  frequency: text('frequency'), // e.g., 'daily', 'weekly', could be part of AI generation or set later
  userId: text('user_id')
    .references(() => users.id, { onDelete: 'cascade' }) // Added onDelete cascade
    .notNull(),
});

export const habitLogs = pgTable('habit_log', {
  id: serial('id').primaryKey(),
  date: timestamp('date', { withTimezone: true }).notNull(),
  completed: boolean('completed').default(false),
  notes: text('notes'), // Changed description to notes for clarity
  habitId: integer('habit_id')
    .references(() => habits.id, { onDelete: 'cascade' }) // Added onDelete cascade
    .notNull(),
  // No need for userId here if we always query through habits table first
  // userId: text('user_id')
  //   .references(() => users.id)
  //   .notNull(),
  createdAt: timestamp('created_at', { withTimezone: true }).defaultNow().notNull(),
});

// Relations
export const userRelations = relations(users, ({ many }) => ({
    habits: many(habits),
    habitLogs: many(habitLogs),
}))

export const habitRelations = relations(habits, ({ many, one }) => ({
    user: one(users, {
        fields: [habits.userId],
        references: [users.id],
    }),
    habitLogs: many(habitLogs),
}))

export const habitLogRelations = relations(habitLogs, ({ one }) => ({
    habit: one(habits, {
        fields: [habitLogs.habitId],
        references: [habits.id],
    }),
}))

// Types
export type User = typeof users.$inferSelect
export type Account = typeof accounts.$inferSelect
export type Session = typeof sessions.$inferSelect
export type Habit = typeof habits.$inferSelect
export type HabitLog = typeof habitLogs.$inferSelect
